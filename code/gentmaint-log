#!/bin/bash

## GentMaint: tools for Gentoo maintenance
## Copyright (c) AstroFloyd, 2008-2023, gentmaint.sf.net
##
## gentmaint-log: run dispatch-conf and list recent updates


function usage () {
    command=`echo ${0} |sed -e 's/^.*\///g'`  # Remove path (e.g. ./)
    gentmaint-version header
    echo
    echo "Run dispatch-conf and show which packages where updated last"
    echo
    echo "Options:"
    echo "  -h:  show this help"
    echo "  -d:  skip dispatch-conf"
    echo "  -m:  show log files for manual updates, rather than for automated updates"
    echo "  -n:  number of log files (updates) to print the updated packages from"
    echo "  -q:  do not print version banner"
    echo
    exit 0
}


# CLI options:
SHOW_MANUALLOGS=0    # Show log files for manual updates, rather than for automated updates
PRINT_VERSION=1      # Print version banner
NUM_LOGS=3           # Number of log files to display
RUN_DISPATCH_CONF=1  # Run dispatch-conf
while getopts "hdmn:q" opt; do
    case $opt in
        h) usage;;
        d) RUN_DISPATCH_CONF=0;;
        m) SHOW_MANUALLOGS=1;;
        n) NUM_LOGS="$OPTARG";;
        q) PRINT_VERSION=0;;
    esac
done



# Print package/version banner:
if [ $PRINT_VERSION == 1 ]
then
    gentmaint-version header
fi


# Run dispatch-conf:
if [ $RUN_DISPATCH_CONF == 1 ]
then
    echo -e '\nRunning dispatch-conf...'
    dispatch-conf
    echo -e 'Done.'
fi
echo


# Check automated update log files:
if [ $SHOW_MANUALLOGS == 1 ]
then
    cd /var/log/gentmaint/manual &> /dev/null   # Show log files for manual updates
    echo -e "Listing \E[1;34mmanually\E[0m updated packages from the last \E[1;44m$NUM_LOGS\E[0m log files:"
else
    cd /var/log/gentmaint/auto   &> /dev/null   # Show log files for automated updates
    echo -e "Listing \E[1;34mautomatically\E[0m updated packages from the last \E[1;44m$NUM_LOGS\E[0m log files:"
fi

echo
# for file in `ls gentmaint-update__* |tail -n $NUM_LOGS`
for file in `ls -rt *log* |tail -n $NUM_LOGS`
do
    echo -e "Processing \E[1;32m${file}\E[0m"
    GREP=grep
    if [ `echo ${file} | grep -E '\.gz$'` ]
    then
	GREP=zgrep
    elif [ `echo ${file} | grep -E '\.bz2$'` ]
    then
	GREP=bzgrep
    elif [ `echo ${file} | grep -E '\.xz$'` ]
    then
	GREP=xzgrep
    elif [ `echo ${file} | grep -E '\.zst$'` ]
    then
	GREP=zstdgrep
    fi
    $GREP 'Emerging ' ${file}  &&  echo
    $GREP revdep-rebuild ${file} | grep library | grep -vi done  &&  echo
    $GREP -H 'failed, aborting' ${file}  |  sed 's/.*/\x1B[1;31m&\x1B[0m/'
    echo
done

cd - &> /dev/null


echo -e ''
